{"version":3,"sources":["constants.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["WEEK_HEADERS","MONTHS","Calendar","props","className","map","header","i","key","_get","day","cx","isSameMonth","today","isToday","weekend","isWeekend","dateObj","date","initialDate","Date","App","useState","setDate","calendar","setCalendar","useEffect","getCalendar","name","onClick","previousMonth","current","nextMonth","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAAaA,G,MAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAE9CC,EAAS,CACpB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YCqBaC,MA3Bf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,mBACZJ,EAAaK,KAAI,SAACC,EAAQC,GAAT,OAChB,yBAAKH,UAAU,qCAAqCI,IAAKD,GACvD,yBAAKH,UAAU,gBAAgBE,QAIrC,yBAAKF,UAAU,oBACZK,IAAKN,EAAO,uBAAwB,IAAIE,KAAI,SAAAK,GAAG,OAC9C,yBACEN,UAAWO,IAAG,gBAAiB,CAC7B,eAAgBD,EAAIE,YACpBC,MAAOH,EAAII,QACXC,QAASL,EAAIM,YAEfR,IAAKE,EAAIO,SAET,yBAAKb,UAAU,gBAAgBM,EAAIQ,aCpBzCC,EAAc,IAAIC,KA4CTC,MA1Cf,WAAgB,IAAD,EACWC,mBAASH,GADpB,mBACND,EADM,KACAK,EADA,OAEmBD,mBAAS,IAF5B,mBAENE,EAFM,KAEIC,EAFJ,KAQb,OAJAC,qBAAU,WACRD,EAAYE,YAAYT,MACvB,CAACA,IAGF,6BACE,yBAAKd,UAAU,UACb,0CACA,8BAAUwB,KAAK,sBAEjB,yBAAKxB,UAAU,sBACb,yBAAKA,UAAU,qBACb,4BACEA,UAAU,WACVyB,QAAS,kBAAMN,EAAQC,EAASM,iBAEhC,8BAAUF,KAAK,0BAEjB,6BACGJ,EAASO,SAAT,UACI9B,EAAOQ,IAAKe,EAAU,gBAAiB,IAD3C,YACkDf,IAC/Ce,EACA,kBAGN,4BACEpB,UAAU,WACVyB,QAAS,kBAAMN,EAAQC,EAASQ,aAEhC,8BAAUJ,KAAK,8BAGnB,kBAAC,EAAD,CAAUK,KAAMT,OClCJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4232dde7.chunk.js","sourcesContent":["export const WEEK_HEADERS = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n\nexport const MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n","import React from 'react';\nimport cx from 'classnames';\nimport _get from 'lodash.get';\n\nimport './styles/calendar.css';\n\nimport { WEEK_HEADERS } from './constants';\n\nfunction Calendar(props) {\n  return (\n    <div className=\"calendar\">\n      <div className=\"calendar-header\">\n        {WEEK_HEADERS.map((header, i) => (\n          <div className=\"calendar-cell calendar-header-cell\" key={i}>\n            <div className=\"cell-content\">{header}</div>\n          </div>\n        ))}\n      </div>\n      <div className=\"calendar-content\">\n        {_get(props, 'data.daysWithPadding', []).map(day => (\n          <div\n            className={cx('calendar-cell', {\n              'other-month': !day.isSameMonth,\n              today: day.isToday,\n              weekend: day.isWeekend,\n            })}\n            key={day.dateObj}\n          >\n            <div className=\"cell-content\">{day.date}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\nexport default Calendar;\n","import _get from 'lodash.get';\nimport { getCalendar } from 'calendar-cli';\nimport React, { useState, useEffect } from 'react';\n\nimport './styles/button.css';\nimport Calendar from './Calendar';\nimport { MONTHS } from './constants';\n\nconst initialDate = new Date();\n\nfunction App() {\n  const [date, setDate] = useState(initialDate);\n  const [calendar, setCalendar] = useState({});\n\n  useEffect(() => {\n    setCalendar(getCalendar(date));\n  }, [date]);\n\n  return (\n    <div>\n      <div className=\"header\">\n        <span>Calendar</span>\n        <ion-icon name=\"calendar-outline\" />\n      </div>\n      <div className=\"calendar-container\">\n        <div className=\"calendar-controls\">\n          <button\n            className=\"btn-icon\"\n            onClick={() => setDate(calendar.previousMonth)}\n          >\n            <ion-icon name=\"chevron-back-outline\" />\n          </button>\n          <div>\n            {calendar.current &&\n              `${MONTHS[_get(calendar, 'current.month', 0)]} ${_get(\n                calendar,\n                'current.year'\n              )}`}\n          </div>\n          <button\n            className=\"btn-icon\"\n            onClick={() => setDate(calendar.nextMonth)}\n          >\n            <ion-icon name=\"chevron-forward-outline\" />\n          </button>\n        </div>\n        <Calendar data={calendar} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}